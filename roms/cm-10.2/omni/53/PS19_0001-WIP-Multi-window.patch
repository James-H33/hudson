From 4ada495d31578587f90581c43794e9fe55f4bef7 Mon Sep 17 00:00:00 2001
From: xplodwild <xplod@ouverta.fr>
Date: Tue, 3 Sep 2013 20:55:56 +0200
Subject: [PATCH] [WIP] Multi-window

This is a big work in progress, which currently has some bugs,
but begins to look okay.

You can already multitask a little bit, by using the
app switcher and long-pressing an icon, then select "Add to
Split View".
Last window touched gets the key focus.

Still are some issues with rotation handling - touch an app
after rotation to make it relayout.

Enjoy :)

Change-Id: I4a03a84539fd3ac1273f0d3503fe8fafcd16be26

Conflicts:
	core/java/android/app/IActivityManager.java
	core/java/android/view/IWindowManager.aidl
	packages/SystemUI/res/values/custom_strings.xml
	services/java/com/android/server/am/ActivityStack.java
---
 core/java/android/app/Activity.java                |  86 ++++++++-
 core/java/android/app/ActivityManagerNative.java   |  24 +++
 core/java/android/app/IActivityManager.java        |   4 +
 core/java/android/content/Intent.java              |   6 +
 core/java/android/view/IWindowManager.aidl         |   9 +
 packages/SystemUI/res/menu/recent_popup_menu.xml   |   1 +
 packages/SystemUI/res/values/custom_strings.xml    |  36 ++++
 .../android/systemui/recent/RecentsActivity.java   |   7 +
 .../android/systemui/recent/RecentsPanelView.java  |  99 ++++++++++
 .../android/server/am/ActivityManagerService.java  |  23 +++
 .../java/com/android/server/am/ActivityStack.java  |  14 +-
 .../android/server/wm/WindowManagerService.java    | 199 ++++++++++++++++++++-
 12 files changed, 503 insertions(+), 5 deletions(-)
 create mode 100644 packages/SystemUI/res/values/custom_strings.xml

diff --git a/core/java/android/app/Activity.java b/core/java/android/app/Activity.java
index 6b5df7f..6fb7427 100644
--- a/core/java/android/app/Activity.java
+++ b/core/java/android/app/Activity.java
@@ -37,6 +37,7 @@ import android.content.res.TypedArray;
 import android.database.Cursor;
 import android.graphics.Bitmap;
 import android.graphics.Canvas;
+import android.graphics.Rect;
 import android.graphics.drawable.Drawable;
 import android.media.AudioManager;
 import android.net.Uri;
@@ -62,6 +63,8 @@ import android.view.ActionMode;
 import android.view.ContextMenu;
 import android.view.ContextMenu.ContextMenuInfo;
 import android.view.ContextThemeWrapper;
+import android.view.Gravity;
+import android.view.IWindowManager;
 import android.view.KeyEvent;
 import android.view.LayoutInflater;
 import android.view.Menu;
@@ -758,6 +761,9 @@ public class Activity extends ContextThemeWrapper
     private Thread mUiThread;
     final Handler mHandler = new Handler();
 
+    private Rect mOriginalBounds;
+    private boolean mIsSplitView;
+
     /** Return the intent that started this activity. */
     public Intent getIntent() {
         return mIntent;
@@ -2421,6 +2427,14 @@ public class Activity extends ContextThemeWrapper
         if (ev.getAction() == MotionEvent.ACTION_DOWN) {
             onUserInteraction();
         }
+        if (mIsSplitView) {
+            IWindowManager wm = (IWindowManager) WindowManagerGlobal.getWindowManagerService();
+            try {
+                wm.notifyActivityTouched(mToken, false);
+            } catch (RemoteException e) {
+                Log.e(TAG, "Cannot notify activity touched", e);
+            }
+        }
         if (getWindow().superDispatchTouchEvent(ev)) {
             return true;
         }
@@ -5088,7 +5102,7 @@ public class Activity extends ContextThemeWrapper
         attachBaseContext(context);
 
         mFragments.attachActivity(this, mContainer, null);
-        
+
         mWindow = PolicyManager.makeNewWindow(this);
         mWindow.setCallback(this);
         mWindow.getLayoutInflater().setPrivateFactory(this);
@@ -5122,6 +5136,11 @@ public class Activity extends ContextThemeWrapper
         }
         mWindowManager = mWindow.getWindowManager();
         mCurrentConfig = config;
+
+        if ((intent.getFlags() & Intent.FLAG_ACTIVITY_SPLIT_VIEW) != 0) {
+            final IWindowManager wm = (IWindowManager) WindowManagerGlobal.getWindowManagerService();
+            updateSplitViewMetrics(true);
+        }
     }
 
     /** @hide */
@@ -5129,6 +5148,70 @@ public class Activity extends ContextThemeWrapper
         return mParent != null ? mParent.getActivityToken() : mToken;
     }
 
+    /** @hide */
+    final void updateSplitViewMetrics(boolean shouldReset) {
+        final IWindowManager wm = (IWindowManager) WindowManagerGlobal.getWindowManagerService();
+
+        try {
+            mIsSplitView = false;
+
+            if (shouldReset) {
+                wm.getSplitViewRect(getTaskId(), true);
+            }
+
+            // Check for split view settings
+            if (wm.isTaskSplitView(getTaskId())) {
+                // This activity/task is tagged as being in split view
+                mIsSplitView = true;
+
+                wm.setTaskChildSplit(mToken, true);
+
+                // Then, we apply it the position and size
+                mWindow.setGravity(Gravity.LEFT | Gravity.TOP);
+
+                WindowManager.LayoutParams params = mWindow.getAttributes();
+
+                // We save the original window size, in case we want to restore it later
+                if (mOriginalBounds == null) {
+                    mOriginalBounds = new Rect();
+                    mOriginalBounds.left = params.x;
+                    mOriginalBounds.top = params.y;
+                    mOriginalBounds.right = params.x + params.width;
+                    mOriginalBounds.bottom = params.y + params.height;
+                }
+
+                Rect windowBounds = wm.getSplitViewRect(getTaskId(), false);
+                mWindow.setLayout(windowBounds.right - windowBounds.left,
+                    windowBounds.bottom - windowBounds.top);
+
+                params.x = windowBounds.left;
+                params.y = windowBounds.top;
+                mWindow.setAttributes(params);
+
+                // Finally, we make the window non-modal to allow the second app to get input
+                mWindow.addFlags(WindowManager.LayoutParams.FLAG_NOT_TOUCH_MODAL);
+                mWindow.addFlags(WindowManager.LayoutParams.FLAG_SPLIT_TOUCH);
+
+                // We notify that we are touched -- but really it's just so that this activity
+                // which just opened has the focus without the need to touch it
+                wm.notifyActivityTouched(mToken, true);
+            } else if (mOriginalBounds != null) {
+                // Restore normal window bounds
+                Log.d(TAG, "Restore original bounds from split (TaskId=" + getTaskId() + ")");
+                WindowManager.LayoutParams params = mWindow.getAttributes();
+                params.x = mOriginalBounds.left;
+                params.y = mOriginalBounds.top;
+
+                mWindow.setLayout(mOriginalBounds.right - mOriginalBounds.left,
+                    mOriginalBounds.bottom - mOriginalBounds.top);
+
+                wm.setTaskChildSplit(mToken, false);
+            }
+        } catch (RemoteException e) {
+            Log.e(TAG, "Could not perform split view actions on restart", e);
+        }
+    }
+
     final void performCreate(Bundle icicle) {
         onCreate(icicle);
         mVisibleFromClient = !mWindow.getWindowStyle().getBoolean(
@@ -5162,6 +5245,7 @@ public class Activity extends ContextThemeWrapper
     
     final void performRestart() {
         mFragments.noteStateNotSaved();
+        updateSplitViewMetrics(false);
 
         if (mStopped) {
             mStopped = false;
diff --git a/core/java/android/app/ActivityManagerNative.java b/core/java/android/app/ActivityManagerNative.java
index ae35338..f3f1ae8 100644
--- a/core/java/android/app/ActivityManagerNative.java
+++ b/core/java/android/app/ActivityManagerNative.java
@@ -629,6 +629,16 @@ public abstract class ActivityManagerNative extends Binder implements IActivityM
             return true;
         }
 
+        case GET_ACTIVITY_FOR_TASK_TRANSACTION: {
+            data.enforceInterface(IActivityManager.descriptor);
+            int task = data.readInt();
+            boolean onlyRoot = data.readInt() != 0;
+            IBinder res = getActivityForTask(task, onlyRoot);
+            reply.writeNoException();
+            reply.writeStrongBinder(res);
+            return true;
+        }
+
         case REPORT_THUMBNAIL_TRANSACTION: {
             data.enforceInterface(IActivityManager.descriptor);
             IBinder token = data.readStrongBinder();
@@ -2601,6 +2611,20 @@ class ActivityManagerProxy implements IActivityManager
         reply.recycle();
         return res;
     }
+    public IBinder getActivityForTask(int task, boolean onlyRoot) throws RemoteException
+    {
+        Parcel data = Parcel.obtain();
+        Parcel reply = Parcel.obtain();
+        data.writeInterfaceToken(IActivityManager.descriptor);
+        data.writeInt(task);
+        data.writeInt(onlyRoot ? 1 : 0);
+        mRemote.transact(GET_ACTIVITY_FOR_TASK_TRANSACTION, data, reply, 0);
+        reply.readException();
+        IBinder res = reply.readStrongBinder();
+        data.recycle();
+        reply.recycle();
+        return res;
+    }
     public void reportThumbnail(IBinder token,
                                 Bitmap thumbnail, CharSequence description) throws RemoteException
     {
diff --git a/core/java/android/app/IActivityManager.java b/core/java/android/app/IActivityManager.java
index 31a6784..685d70a 100644
--- a/core/java/android/app/IActivityManager.java
+++ b/core/java/android/app/IActivityManager.java
@@ -114,6 +114,7 @@ public interface IActivityManager extends IInterface {
     public boolean moveActivityTaskToBack(IBinder token, boolean nonRoot) throws RemoteException;
     public void moveTaskBackwards(int task) throws RemoteException;
     public int getTaskForActivity(IBinder token, boolean onlyRoot) throws RemoteException;
+    public IBinder getActivityForTask(int task, boolean onlyRoot) throws RemoteException;
     /* oneway */
     public void reportThumbnail(IBinder token,
             Bitmap thumbnail, CharSequence description) throws RemoteException;
@@ -643,4 +644,7 @@ public interface IActivityManager extends IInterface {
     int SET_USER_IS_MONKEY_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+165;
     int HANG_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+166;
     int GET_CALLING_PACKAGE_FOR_BROADCAST_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+168;
+
+    /* SPLIT VIEW */
+    int GET_ACTIVITY_FOR_TASK_TRANSACTION = IBinder.FIRST_CALL_TRANSACTION+200;
 }
diff --git a/core/java/android/content/Intent.java b/core/java/android/content/Intent.java
index 99e899a..ad59dc0 100644
--- a/core/java/android/content/Intent.java
+++ b/core/java/android/content/Intent.java
@@ -3533,6 +3533,12 @@ public class Intent implements Parcelable, Cloneable {
      */
     public static final int FLAG_ACTIVITY_TASK_ON_HOME = 0X00004000;
     /**
+     * If set in an Intent passed to {@link Context#startActivity Context.startActivity()},
+     * this flag will cause a newly launching task to be resized according to the split
+     * view metrics, making it running alongside another app.
+     */
+    public static final int FLAG_ACTIVITY_SPLIT_VIEW = 0x00002000;
+    /**
      * If set, when sending a broadcast only registered receivers will be
      * called -- no BroadcastReceiver components will be launched.
      */
diff --git a/core/java/android/view/IWindowManager.aidl b/core/java/android/view/IWindowManager.aidl
index be546e9..6bfd14a 100644
--- a/core/java/android/view/IWindowManager.aidl
+++ b/core/java/android/view/IWindowManager.aidl
@@ -295,4 +295,13 @@ interface IWindowManager
      * Update the application display metrics
      */
     void updateDisplayMetrics();
+
+    /** SPLIT VIEW **/
+    boolean isTaskSplitView(int taskId);
+    void setTaskSplitView(int taskId, boolean split);
+    void setTaskChildSplit(IBinder token, boolean split);
+    Rect getSplitViewRect(int taskId, boolean resetLocation);
+    void notifyActivityTouched(IBinder token, boolean force);
+
+    /** SPLIT VIEW END **/
 }
diff --git a/packages/SystemUI/res/menu/recent_popup_menu.xml b/packages/SystemUI/res/menu/recent_popup_menu.xml
index eecfb9a..f9de375 100644
--- a/packages/SystemUI/res/menu/recent_popup_menu.xml
+++ b/packages/SystemUI/res/menu/recent_popup_menu.xml
@@ -18,6 +18,7 @@
 */
 -->
 <menu xmlns:android="http://schemas.android.com/apk/res/android">
+    <item android:id="@+id/recent_add_split_view" android:title="@string/status_bar_recent_add_to_split_view" />
     <item android:id="@+id/recent_remove_item" android:title="@string/status_bar_recent_remove_item_title" />
     <item android:id="@+id/recent_inspect_item" android:title="@string/status_bar_recent_inspect_item_title" />
 </menu>
diff --git a/packages/SystemUI/res/values/custom_strings.xml b/packages/SystemUI/res/values/custom_strings.xml
new file mode 100644
index 0000000..69259b5
--- /dev/null
+++ b/packages/SystemUI/res/values/custom_strings.xml
@@ -0,0 +1,36 @@
+<?xml version="1.0" encoding="utf-8"?>
+<!-- Copyright (C) 2013 The OmniROM Project
+
+ This program is free software: you can redistribute it and/or modify
+ it under the terms of the GNU General Public License as published by
+ the Free Software Foundation, either version 2 of the License, or
+ (at your option) any later version.
+
+ This program is distributed in the hope that it will be useful,
+ but WITHOUT ANY WARRANTY; without even the implied warranty of
+ MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
+ GNU General Public License for more details.
+
+ You should have received a copy of the GNU General Public License
+ along with this program.  If not, see <http://www.gnu.org/licenses/>.
+
+-->
+<resources xmlns:xliff="urn:oasis:names:tc:xliff:document:1.2">
+    <!-- Quick Settings Wi-Fi Back Tile Tethering label -->
+    <string name="quick_settings_wifi_tethering_label">Tethering</string>
+
+    <!-- Quick Settings Bluetooth Not Discoverable label -->
+    <string name="quick_settings_bluetooth_not_discoverable_label">Not discoverable</string>
+
+    <!-- Quick Settings Bluetooth Discoverable label -->
+    <string name="quick_settings_bluetooth_discoverable_label">Discoverable</string>
+
+    <!-- Quick Settings Bluetooth Not Connected -->
+    <string name="quick_settings_bluetooth_disabled">Disabled</string>
+
+    <!-- Quick Settings Bluetooth Number of Paired Devices -->
+    <string name="quick_settings_bluetooth_number_paired"><xliff:g id="number">%d</xliff:g> Devices paired</string>
+
+    <!-- Title shown in recents popup for adding an application to the split view -->
+    <string name="status_bar_recent_add_to_split_view">Add to Split View</string>
+</resources>
\ No newline at end of file
diff --git a/packages/SystemUI/src/com/android/systemui/recent/RecentsActivity.java b/packages/SystemUI/src/com/android/systemui/recent/RecentsActivity.java
index 62030ad..e1c847b 100644
--- a/packages/SystemUI/src/com/android/systemui/recent/RecentsActivity.java
+++ b/packages/SystemUI/src/com/android/systemui/recent/RecentsActivity.java
@@ -175,6 +175,13 @@ public class RecentsActivity extends Activity {
         finish();
     }
 
+    public void dismissAndDoNothing() {
+        if (mRecentsPanel != null) {
+            mRecentsPanel.show(false);
+        }
+        finish();
+    }
+
     @Override
     protected void onCreate(Bundle savedInstanceState) {
         setContentView(R.layout.status_bar_recent_panel);
diff --git a/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java b/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java
index d212787..e2622cc 100644
--- a/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java
+++ b/packages/SystemUI/src/com/android/systemui/recent/RecentsPanelView.java
@@ -23,8 +23,11 @@ import android.app.ActivityManager;
 import android.app.ActivityManagerNative;
 import android.app.ActivityOptions;
 import android.app.TaskStackBuilder;
+import android.content.ComponentName;
 import android.content.Context;
 import android.content.Intent;
+import android.content.pm.ActivityInfo;
+import android.content.pm.PackageManager;
 import android.content.res.Configuration;
 import android.content.res.Resources;
 import android.content.res.TypedArray;
@@ -40,6 +43,7 @@ import android.os.UserHandle;
 import android.provider.Settings;
 import android.util.AttributeSet;
 import android.util.Log;
+import android.view.IWindowManager;
 import android.view.LayoutInflater;
 import android.view.MenuItem;
 import android.view.MotionEvent;
@@ -47,6 +51,7 @@ import android.view.View;
 import android.view.ViewGroup;
 import android.view.ViewPropertyAnimator;
 import android.view.ViewRootImpl;
+import android.view.WindowManagerGlobal;
 import android.view.accessibility.AccessibilityEvent;
 import android.view.animation.AnimationUtils;
 import android.view.animation.DecelerateInterpolator;
@@ -66,6 +71,7 @@ import com.android.systemui.statusbar.tablet.StatusBarPanel;
 import com.android.systemui.statusbar.tablet.TabletStatusBar;
 
 import java.util.ArrayList;
+import java.util.List;
 
 public class RecentsPanelView extends FrameLayout implements OnItemClickListener, RecentsCallback,
         StatusBarPanel, Animator.AnimatorListener {
@@ -391,6 +397,10 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
         ((RecentsActivity) mContext).dismissAndGoBack();
     }
 
+    public void dismissAndDoNothing() {
+        ((RecentsActivity) mContext).dismissAndDoNothing();
+    }
+
     public void onAnimationCancel(Animator animation) {
     }
 
@@ -710,8 +720,19 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
                         holder.thumbnailViewImage, bm, 0, 0, null).toBundle();
 
         show(false);
+
         if (ad.taskId >= 0) {
             // This is an active task; it should just go to the foreground.
+            // If that task was split viewed, a normal press wil resume it to
+            // normal fullscreen view
+            IWindowManager wm = (IWindowManager) WindowManagerGlobal.getWindowManagerService();
+            try {
+                if (DEBUG) Log.v(TAG, "Restoring window full screen after split, because of normal tap");
+                wm.setTaskSplitView(ad.taskId, false);
+            } catch (RemoteException e) {
+                Log.e(TAG, "Could not setTaskSplitView to fullscreen", e);
+            }
+
             am.moveTaskToFront(ad.taskId, ActivityManager.MOVE_TASK_WITH_HOME,
                     opts);
         } else {
@@ -805,6 +826,84 @@ public class RecentsPanelView extends FrameLayout implements OnItemClickListener
                     } else {
                         throw new IllegalStateException("Oops, no tag on view " + selectedView);
                     }
+                } else if (item.getItemId() == R.id.recent_add_split_view) {
+                    // Either start a new activity in split view, or move the current task
+                    // to front, but resized
+                    ViewHolder holder = (ViewHolder)selectedView.getTag();
+
+                    if (holder != null) {
+                        final Context context = selectedView.getContext();
+                        final ActivityManager am = (ActivityManager)
+                            context.getSystemService(Context.ACTIVITY_SERVICE);
+                        final IWindowManager wm = (IWindowManager) WindowManagerGlobal.getWindowManagerService();
+
+                        TaskDescription ad = holder.taskDescription;
+
+                        show(false);
+                        dismissAndDoNothing();
+
+                        // If we weren't on the homescreen, resize the previous activity (if not already split)
+                        final List<ActivityManager.RecentTaskInfo> recentTasks =
+                            am.getRecentTasks(2, ActivityManager.RECENT_IGNORE_UNAVAILABLE);
+
+                        if (recentTasks != null && recentTasks.size() > 0) {
+                            final PackageManager pm = mContext.getPackageManager();
+                            ActivityInfo homeInfo = new Intent(Intent.ACTION_MAIN).addCategory(Intent.CATEGORY_HOME)
+                                    .resolveActivityInfo(pm, 0);
+                            ActivityManager.RecentTaskInfo taskInfo = recentTasks.get(0);
+                            Intent intent = new Intent(taskInfo.baseIntent);
+                            if (taskInfo.origActivity != null) {
+                                intent.setComponent(taskInfo.origActivity);
+                            }
+
+                            ComponentName component = intent.getComponent();
+
+                            if (homeInfo == null
+                                || !homeInfo.packageName.equals(component.getPackageName())
+                                || !homeInfo.name.equals(component.getClassName())) {
+                                // This is not the home activity, so split it
+                                try {
+                                    wm.setTaskSplitView(taskInfo.persistentId, true);
+                                } catch (RemoteException e) {
+                                    Log.e(TAG, "Could not set previous task to split view", e);
+                                }
+
+                                // We move this to front first, then our activity, so it updates
+                                am.moveTaskToFront(taskInfo.persistentId, 0, null);
+                            }
+                        }
+
+                        if (ad.taskId >= 0) {
+                            // The task is already launched. The Activity will pull its split
+                            // information from WindowManagerService once it resumes, so we
+                            // set its state here.
+                            try {
+                                wm.setTaskSplitView(ad.taskId, true);
+                            } catch (RemoteException e) {
+                                Log.e(TAG, "Could not setTaskSplitView", e);
+                            }
+                            am.moveTaskToFront(ad.taskId, 0, null);
+                        } else {
+                            // The app has been killed (we have no taskId for it), so we start
+                            // a new one with the SPLIT_VIEW flag
+                            Intent intent = ad.intent;
+                            intent.addFlags(Intent.FLAG_ACTIVITY_SPLIT_VIEW
+                                | Intent.FLAG_ACTIVITY_NEW_TASK);
+
+                            if (DEBUG) Log.v(TAG, "Starting split view activity " + intent);
+
+                            try {
+                                context.startActivityAsUser(intent, null,
+                                        new UserHandle(UserHandle.USER_CURRENT));
+                            } catch (SecurityException e) {
+                                Log.e(TAG, "Recents does not have the permission to launch " + intent, e);
+                            }
+                        }
+
+                        
+                    } else {
+                        throw new IllegalStateException("Oops, no tag on view " + selectedView);
+                    }
                 } else {
                     return false;
                 }
diff --git a/services/java/com/android/server/am/ActivityManagerService.java b/services/java/com/android/server/am/ActivityManagerService.java
index 9589375..4c4f9c0 100644
--- a/services/java/com/android/server/am/ActivityManagerService.java
+++ b/services/java/com/android/server/am/ActivityManagerService.java
@@ -6352,6 +6352,29 @@ public final class ActivityManagerService  extends ActivityManagerNative
         return -1;
     }
 
+    public IBinder getActivityForTask(int task, boolean onlyRoot) {
+        synchronized(this) {
+            return getActivityForTaskLocked(task, onlyRoot);
+        }
+    }
+
+    IBinder getActivityForTaskLocked(int task, boolean onlyRoot) {
+        final int N = mMainStack.mHistory.size();
+        TaskRecord lastTask = null;
+        for (int i=0; i<N; i++) {
+            ActivityRecord r = (ActivityRecord)mMainStack.mHistory.get(i);
+            if (r.task.taskId == task) {
+                if (!onlyRoot || lastTask != r.task) {
+                    return r.appToken;
+                }
+                return null;
+            }
+            lastTask = r.task;
+        }
+
+        return null;
+    }
+
     // =========================================================
     // THUMBNAILS
     // =========================================================
diff --git a/services/java/com/android/server/am/ActivityStack.java b/services/java/com/android/server/am/ActivityStack.java
index c524a78..e1ea841 100644
--- a/services/java/com/android/server/am/ActivityStack.java
+++ b/services/java/com/android/server/am/ActivityStack.java
@@ -19,6 +19,7 @@ package com.android.server.am;
 import static android.Manifest.permission.START_ANY_ACTIVITY;
 import static android.content.pm.PackageManager.PERMISSION_GRANTED;
 
+import com.android.internal.app.ActivityTrigger;
 import com.android.internal.app.HeavyWeightSwitcherActivity;
 import com.android.internal.os.BatteryStatsImpl;
 import com.android.server.am.ActivityManagerService.PendingActivityLaunch;
@@ -67,6 +68,8 @@ import android.util.EventLog;
 import android.util.Log;
 import android.util.Slog;
 import android.view.Display;
+import android.view.IWindowManager;
+import android.view.WindowManagerGlobal;
 
 import com.android.internal.app.ActivityTrigger;
 
@@ -1380,7 +1383,16 @@ final class ActivityStack {
             // Aggregate current change flags.
             configChanges |= r.configChangeFlags;
 
-            if (r.fullscreen) {
+            boolean isSplitView = false;
+
+            try {
+                IWindowManager wm = (IWindowManager) WindowManagerGlobal.getWindowManagerService();
+                isSplitView = wm.isTaskSplitView(r.task.taskId);
+            } catch (RemoteException e) {
+                Slog.e(TAG, "Cannot get split view status", e);
+            }
+
+            if (r.fullscreen && !isSplitView) {
                 // At this point, nothing else needs to be shown
                 if (DEBUG_VISBILITY) Slog.v(
                         TAG, "Stopping: fullscreen at " + r);
diff --git a/services/java/com/android/server/wm/WindowManagerService.java b/services/java/com/android/server/wm/WindowManagerService.java
index 9840418..b69e5e4 100644
--- a/services/java/com/android/server/wm/WindowManagerService.java
+++ b/services/java/com/android/server/wm/WindowManagerService.java
@@ -65,6 +65,7 @@ import com.android.server.power.PowerManagerService;
 import com.android.server.power.ShutdownThread;
 
 import android.Manifest;
+import android.app.ActivityManager;
 import android.app.ActivityManagerNative;
 import android.app.IActivityManager;
 import android.app.StatusBarManager;
@@ -168,6 +169,7 @@ import java.util.Date;
 import java.util.HashMap;
 import java.util.HashSet;
 import java.util.Iterator;
+import java.util.Map;
 import java.util.List;
 import java.util.NoSuchElementException;
 
@@ -837,6 +839,12 @@ public class WindowManagerService extends IWindowManager.Stub
         // Add ourself to the Watchdog monitors.
         Watchdog.getInstance().addMonitor(this);
 
+        mSplitViewTasks = new int[2];
+        mNextSplitViewLocation = 0;
+        mIsTaskSplitted = new HashMap<Integer, Boolean>();
+        mTaskLocation = new HashMap<Integer, Integer>();
+        mIsTokenSplitted = new HashMap<IBinder, Boolean>();
+
         SurfaceControl.openTransaction();
         try {
             createWatermarkInTransaction();
@@ -9625,9 +9633,24 @@ public class WindowManagerService extends IWindowManager.Stub
 
             // Dispatch to this window if it is wants key events.
             if (win.canReceiveKeys()) {
-                if (DEBUG_FOCUS) Slog.v(
-                        TAG, "Found focus @ " + i + " = " + win);
-                return win;
+                if (thisApp != null) {
+                    if (mIsTokenSplitted.containsKey(thisApp.token) && mIsTokenSplitted.get(thisApp.token)) {
+                        if ((mTaskTouched != null && mTaskTouched.equals(thisApp.token)) || mTaskTouched == null) {
+                            if (DEBUG_FOCUS) Slog.v(
+                                TAG, "Found focus @ " + i + " = " + win);
+                            return win;
+                        } else {
+                            if (DEBUG_FOCUS || localLOGV) Slog.v(
+                                TAG, "Task " + win + " is split, but not last touched");
+                        }
+                    } else {
+                        if (DEBUG_FOCUS) Slog.v(TAG, "Task " + win + " has no split token");
+                        return win;
+                    }
+                } else {
+                    if (DEBUG_FOCUS) Slog.v(TAG, "Null thisApp");
+                    return win;
+                }
             }
         }
         return null;
@@ -10699,4 +10722,174 @@ public class WindowManagerService extends IWindowManager.Stub
             displayContent.updateDisplayInfo();
         }
     }
+
+    /** SPLIT VIEW **/
+
+    private int mSplitViewTasks[];
+    private int mNextSplitViewLocation;
+    private Map<Integer, Boolean> mIsTaskSplitted;
+    private Map<IBinder, Boolean> mIsTokenSplitted;
+    private Map<Integer, Integer> mTaskLocation;
+    private IBinder mTaskTouched;
+
+    /**
+     * Returns whether or not the provided taskId is in split view mode
+     * or not. Remember that the taskId is shared between all activities
+     * of an app, thus children activities from the root one shares the
+     * same taskId.
+     *
+     * @param taskId The task id of the activity
+     * @return True if the task is in split view mode
+     */
+    public boolean isTaskSplitView(int taskId) {
+        if (mIsTaskSplitted.containsKey(taskId)) {
+            return mIsTaskSplitted.get(taskId);
+        } else {
+            return false;
+        }
+    }
+
+    /**
+     * Sets whether or not a task should be in split view or not. The
+     * update only occurs when activities performs a resume or restart
+     * operation.
+     *
+     * @param taskId The task id of the activity
+     * @param split True to enable split mode, false otherwise
+     */
+    public void setTaskSplitView(int taskId, boolean split) {
+        mIsTaskSplitted.put(taskId, split);
+        try {
+            mIsTokenSplitted.put(mActivityManager.getActivityForTask(taskId, false), split);
+        } catch (RemoteException e) {
+            Log.e(TAG, "Cannot retrieve activity token for task " + taskId, e);
+        }
+    }
+
+    /**
+     * Notifies the WindowManager that the provided token is split
+     * or not. This is useful because children activities don't share
+     * the same token, so Activity can notify the window token is split
+     * as well based on the taskId it reads during performRestart.
+     *
+     * @param token The activity token
+     * @param split True if the token should be split
+     */
+    public void setTaskChildSplit(IBinder token, boolean split) {
+        mIsTokenSplitted.put(token, split);
+    }
+
+    /**
+     * Notifies that the provided activity token has been touched, and
+     * sets the focus to that activity, and move it to the front so it
+     * gets updated properly.
+     *
+     * @param token The activity token
+     * @param force Set this to true to force the focus update even if the
+     *              application was already focused
+     */
+    public void notifyActivityTouched(IBinder token, boolean force) {
+        mTaskTouched = token;
+        synchronized(mWindowMap) {
+            boolean changed = false;
+            if (token != null) {
+                AppWindowToken newFocus = findAppWindowToken(token);
+                if (newFocus == null) {
+                    Slog.w(TAG, "Attempted to set focus to non-existing app token: " + token);
+                    return;
+                }
+                changed = mFocusedApp != newFocus;
+                mFocusedApp = newFocus;
+                if (changed || force) {
+                    if (DEBUG_FOCUS) Slog.v(TAG, "Changed app focus to " + token);
+                    mInputMonitor.setFocusedAppLw(newFocus);
+                }
+            }
+
+            if (changed || force) {
+                final long origId = Binder.clearCallingIdentity();
+                updateFocusedWindowLocked(UPDATE_FOCUS_NORMAL, true);
+                mH.removeMessages(H.REPORT_FOCUS_CHANGE);
+                mH.sendEmptyMessage(H.REPORT_FOCUS_CHANGE);
+                Binder.restoreCallingIdentity(origId);
+            }
+        }
+
+        // We only move the activity to front if it's not already the focused app.
+        // Not doing so causes a huge lag when opening an app in split view, because
+        // it is moved to front while starting.
+        if (!force) {
+            final long origId = Binder.clearCallingIdentity();
+            try {
+                mActivityManager.moveTaskToFront(mActivityManager.getTaskForActivity(token, false), 0, null);
+            } catch (RemoteException e) {
+                Log.e(TAG, "Cannot move the activity to front", e);
+            }
+            Binder.restoreCallingIdentity(origId);
+        }
+    }
+
+    /**
+     * Computes and return the final window metrics for the provided
+     * taskId. It will automatically set the task to the split mode.
+     *
+     * @param taskId The id of the task
+     * @param resetLocation True to reset the location to the next available spot
+     * @return A rect of the final window metrics
+     */
+    public Rect getSplitViewRect(int taskId, boolean resetLocation) {
+        mSplitViewTasks[mNextSplitViewLocation] = taskId;
+        mIsTaskSplitted.put(taskId, true);
+
+        // TODO(multidisplay): For now, apply Configuration to main screen only.
+        final DisplayContent displayContent = getDefaultDisplayContentLocked();
+
+        // Use the effective "visual" dimensions based on current rotation
+        final boolean rotated = (mRotation == Surface.ROTATION_90
+                || mRotation == Surface.ROTATION_270);
+        final int realdw = rotated ?
+                displayContent.mBaseDisplayHeight : displayContent.mBaseDisplayWidth;
+        final int realdh = rotated ?
+                displayContent.mBaseDisplayWidth : displayContent.mBaseDisplayHeight;
+	final boolean nativeLandscape =
+                (displayContent.mBaseDisplayHeight < displayContent.mBaseDisplayWidth);
+
+        int dw = realdw;
+        int dh = realdh;
+
+
+        // Get application display metrics.
+        final int appWidth = mPolicy.getNonDecorDisplayWidth(dw, dh, mRotation);
+        final int appHeight = mPolicy.getNonDecorDisplayHeight(dw, dh, mRotation);
+
+        int location = mNextSplitViewLocation;
+        if (mTaskLocation.containsKey(taskId)) {
+            location = mTaskLocation.get(taskId);
+        } else {
+            if (mNextSplitViewLocation == 0) {
+                mNextSplitViewLocation = 1;
+            } else {
+                mNextSplitViewLocation = 0;
+            }
+        }
+
+        mTaskLocation.put(taskId, location);
+
+        if (location == 0) {
+            if (nativeLandscape ^ rotated) {
+                return new Rect(0, 0, appWidth/2, appHeight);
+            } else {
+                return new Rect(0, 0, appWidth, appHeight/2);
+            }
+        } else {
+            if (nativeLandscape ^ rotated) {
+                return new Rect(appWidth/2, 0, appWidth, appHeight);
+            } else {
+                return new Rect(0, appHeight/2, appWidth, appHeight);
+            }
+        }
+
+    }
+
+    /** END SPLIT VIEW **/
 }
-- 
1.8.4

