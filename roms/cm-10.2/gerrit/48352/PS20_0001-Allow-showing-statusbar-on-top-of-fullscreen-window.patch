From e551b79f49ad7b9cce115b78cab0b94182c738bf Mon Sep 17 00:00:00 2001
From: Kiril Mikos <kiril.mik.os@gmail.com>
Date: Sat, 17 Aug 2013 19:09:54 +0900
Subject: [PATCH] Allow showing statusbar on top of fullscreen window.

Swipe from top of the screen to show statusbar.
Statusbar will automatically disappears after 2 sec.

PS7: Also show statusbar when user moved finger far enough.
PS8: Compatible with Expanded desktop.
PS12:
  Fixed button in statusbar.
  Don't hide statusbar while expanded.
  Hide statusbar after collapsed.
  Disabled by default.
  Some small fixes.
PS19: Works through PieService.
PS20: Fixed class and variables naming.

Change-Id: I59bd022be6eb065ec6b9361213cc4fddc065b925
---
 core/java/android/provider/Settings.java           |  13 ++
 .../android/systemui/statusbar/BaseStatusBar.java  |   3 +-
 .../systemui/statusbar/phone/PhoneStatusBar.java   |   6 +-
 .../internal/policy/impl/PhoneWindowManager.java   | 214 ++++++++++++++++++++-
 4 files changed, 227 insertions(+), 9 deletions(-)

diff --git a/core/java/android/provider/Settings.java b/core/java/android/provider/Settings.java
index efe47fd..25120f4 100644
--- a/core/java/android/provider/Settings.java
+++ b/core/java/android/provider/Settings.java
@@ -2874,6 +2874,13 @@ public final class Settings {
          */
         public static final String EXPANDED_DESKTOP_STATE = "expanded_desktop_state";
 
+        /** @hide */
+        public static final int EXPANDED_DESKTOP_DISABLED = 0;
+        /** @hide */
+        public static final int EXPANDED_DESKTOP_STATUS_BAR_VISIBLE = 1;
+        /** @hide */
+        public static final int EXPANDED_DESKTOP_STATUS_BAR_HIDDEN = 2;
+
         /**
          * Expanded desktop style (with status bar or without status bar)
          * @hide
@@ -2881,6 +2888,12 @@ public final class Settings {
         public static final String EXPANDED_DESKTOP_STYLE = "expanded_desktop_style";
 
         /**
+         * Show statusbar on top of fullscreen window (with status bar or without status bar)
+         * @hide
+         */
+        public static final String STATUS_BAR_ON_TOP_OF_FULLSCREEN = "status_bar_on_top_of_fullscreen";
+
+        /**
          * Whether to use a separate delay for "slide to unlock" and security
          * lock
          * @hide
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
index 72ba5cb..0add6dd 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/BaseStatusBar.java
@@ -675,7 +675,8 @@ public abstract class BaseStatusBar extends SystemUI implements
                             .getDimensionPixelSize(com.android.internal.R.dimen.status_bar_height);
                     float recentsItemTopPadding = statusBarHeight;
 
-                    if (getExpandedDesktopMode() == 2) {
+                    if (getExpandedDesktopMode()
+                            == Settings.System.EXPANDED_DESKTOP_STATUS_BAR_HIDDEN) {
                         statusBarHeight = 0;
                     }
 
diff --git a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
index 2007d78..2be8648 100644
--- a/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
+++ b/packages/SystemUI/src/com/android/systemui/statusbar/phone/PhoneStatusBar.java
@@ -1670,7 +1670,8 @@ public class PhoneStatusBar extends BaseStatusBar {
         }
         // don't allow expanding via e.g. service call while status bar is hidden
         // due to expanded desktop
-        if (getExpandedDesktopMode() == 2) {
+        if (getExpandedDesktopMode() == Settings.System.EXPANDED_DESKTOP_STATUS_BAR_HIDDEN
+                && !mExpandedVisible) {
             return;
         }
 
@@ -1749,7 +1750,8 @@ public class PhoneStatusBar extends BaseStatusBar {
         }
         // don't allow expanding via e.g. service call while status bar is hidden
         // due to expanded desktop
-        if (getExpandedDesktopMode() == 2) {
+        if (getExpandedDesktopMode() == Settings.System.EXPANDED_DESKTOP_STATUS_BAR_HIDDEN
+                && !mExpandedVisible) {
             return;
         }
 
diff --git a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
index 681bd85..ffdd7f9 100644
--- a/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
+++ b/policy/src/com/android/internal/policy/impl/PhoneWindowManager.java
@@ -77,6 +77,7 @@ import com.android.internal.util.cm.DevUtils;
 
 import android.service.dreams.DreamService;
 import android.service.dreams.IDreamManager;
+import android.service.pie.PieManager;
 import android.util.DisplayMetrics;
 import android.util.EventLog;
 import android.util.Log;
@@ -98,6 +99,7 @@ import android.view.MotionEvent;
 import android.view.Surface;
 import android.view.View;
 import android.view.ViewConfiguration;
+import android.view.ViewGroup;
 import android.view.Window;
 import android.view.WindowManager;
 import android.view.WindowManagerGlobal;
@@ -117,6 +119,8 @@ import com.android.internal.policy.impl.keyguard.KeyguardViewManager;
 import com.android.internal.policy.impl.keyguard.KeyguardViewMediator;
 import com.android.internal.statusbar.IStatusBarService;
 import com.android.internal.telephony.ITelephony;
+import com.android.internal.util.pie.PiePosition;
+import com.android.internal.util.pie.PieServiceConstants;
 import com.android.internal.widget.PointerLocationView;
 
 import java.io.File;
@@ -343,6 +347,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     boolean mIsLongPress;
     private boolean mAnimatingWindows;
     private boolean mNeedUpdateSettings;
+    private PieManager mPieManager;
 
     private static final class PointerLocationInputEventReceiver extends InputEventReceiver {
         private final PointerLocationView mView;
@@ -374,6 +379,80 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     PointerLocationView mPointerLocationView;
     InputChannel mPointerLocationInputChannel;
 
+    private static final int STATUS_BAR_HIDE_DELAY = 2000; // 2 sec
+    private PieManager.PieActivationListener mShowStatusBarListener =
+            new PieManager.PieActivationListener(Looper.myLooper()) {
+        @Override
+        public void onPieActivation(int touchX, int touchY, PiePosition position, int flags) {
+            if (dropEventsUntilLift()) {
+                setStatusBarShownTemporarily(true);
+                mWindowManagerFuncs.reevaluateStatusBarVisibility();
+                mHandler.removeMessages(MSG_HIDE_STATUS_BAR);
+                mHandler.sendEmptyMessageDelayed(
+                        MSG_HIDE_STATUS_BAR, STATUS_BAR_HIDE_DELAY);
+            } else {
+                restoreListenerState();
+            }
+        }
+    };
+
+    private final class StatusBarHideEventsReceiver extends InputEventReceiver {
+        public StatusBarHideEventsReceiver(InputChannel inputChannel, Looper looper) {
+            super(inputChannel, looper);
+        }
+
+        @Override
+        public void onInputEvent(InputEvent event) {
+            if (!(event instanceof MotionEvent)) {
+                finishInputEvent(event, false);
+                return;
+            }
+
+            MotionEvent m = (MotionEvent) event;
+
+            switch (m.getAction()) {
+                case MotionEvent.ACTION_DOWN:
+                    if (m.getY() <= mStatusBarHeight || isStatusbarExpanded()) {
+                        delayHiding();
+                    } else {
+                        setStatusBarShownTemporarily(false);
+                        mWindowManagerFuncs.reevaluateStatusBarVisibility();
+                    }
+                    break;
+                case MotionEvent.ACTION_MOVE:
+                    if (!mStatusBarHideAfterCollapsed) {
+                        if (isStatusbarExpanded()) {
+                            mHandler.removeMessages(MSG_HIDE_STATUS_BAR);
+                            mStatusBarHideAfterCollapsed = true;
+                        } else if (m.getY() <= mStatusBarHeight) {
+                            delayHiding();
+                        }
+                    }
+                    break;
+                case MotionEvent.ACTION_UP:
+                    if (m.getY() <= mStatusBarHeight || isStatusbarExpanded()) {
+                        delayHiding();
+                    }
+                    break;
+            }
+            finishInputEvent(event, false);
+        }
+
+        private void delayHiding() {
+            mHandler.removeMessages(MSG_HIDE_STATUS_BAR);
+            mHandler.sendEmptyMessageDelayed(
+                    MSG_HIDE_STATUS_BAR, STATUS_BAR_HIDE_DELAY);
+        }
+    }
+
+    // Show statusbar gesture receiver
+    StatusBarHideEventsReceiver mStatusBarHideEventsReceiver;
+    InputChannel mStatusBarHideInputChannel;
+
+    private boolean mShowStatusBarOnTopOfFullscreen = false;
+    private boolean mStatusBarShownTemporarily = false;
+    private boolean mStatusBarHideAfterCollapsed = false;
+
     // The current size of the screen; really; extends into the overscan area of
     // the screen and doesn't account for any system elements like the status bar.
     int mOverscanScreenLeft, mOverscanScreenTop;
@@ -543,6 +622,11 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     private static final int MSG_DISPATCH_MEDIA_KEY_WITH_WAKE_LOCK = 3;
     private static final int MSG_DISPATCH_MEDIA_KEY_REPEAT_WITH_WAKE_LOCK = 4;
     private static final int MSG_DISPATCH_VOLKEY_WITH_WAKE_LOCK = 5;
+    private static final int MSG_ENABLE_STATUS_BAR_SHOW_LISTENER = 6;
+    private static final int MSG_DISABLE_STATUS_BAR_SHOW_LISTENER = 7;
+    private static final int MSG_ENABLE_STATUS_BAR_HIDE_RECEIVER= 8;
+    private static final int MSG_DISABLE_STATUS_BAR_HIDE_RECEIVER = 9;
+    private static final int MSG_HIDE_STATUS_BAR = 10;
 
     private class PolicyHandler extends Handler {
         @Override
@@ -565,6 +649,28 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                     dispatchMediaKeyWithWakeLockToAudioService((KeyEvent)msg.obj);
                     dispatchMediaKeyWithWakeLockToAudioService(KeyEvent.changeAction((KeyEvent)msg.obj, KeyEvent.ACTION_UP));
                     break;
+                case MSG_ENABLE_STATUS_BAR_SHOW_LISTENER:
+                    enableStatusBarShowPieListener();
+                    break;
+                case MSG_DISABLE_STATUS_BAR_SHOW_LISTENER:
+                    disableStatusBarShowPieListener();
+                    break;
+                case MSG_ENABLE_STATUS_BAR_HIDE_RECEIVER:
+                    enableStatusBarHideReceiver();
+                    break;
+                case MSG_DISABLE_STATUS_BAR_HIDE_RECEIVER:
+                    disableStatusBarHideReceiver();
+                    break;
+                case MSG_HIDE_STATUS_BAR:
+                    if (isStatusBarShownTemporarily()) {
+                        if (isStatusbarExpanded()) {
+                            mStatusBarHideAfterCollapsed = true;
+                        } else {
+                            setStatusBarShownTemporarily(false);
+                            mWindowManagerFuncs.reevaluateStatusBarVisibility();
+                        }
+                    }
+                    break;
             }
         }
     }
@@ -656,6 +762,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             resolver.registerContentObserver(Settings.System.getUriFor(
                     Settings.System.HARDWARE_KEY_REBINDING), false, this,
                     UserHandle.USER_ALL);
+            resolver.registerContentObserver(Settings.System.getUriFor(
+                    Settings.System.STATUS_BAR_ON_TOP_OF_FULLSCREEN), false, this,
+                    UserHandle.USER_ALL);
 
             updateSettings();
         }
@@ -689,6 +798,13 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         mDeviceKeyHandler = (device != null) ? device.getDeviceKeyHandler() : null;
     }
 
+    private boolean isStatusbarExpanded() {
+        if (mStatusBar != null) {
+            return mStatusBar.getAttrs().height == ViewGroup.LayoutParams.MATCH_PARENT;
+        }
+        return false;
+    }
+
     IStatusBarService getStatusBarService() {
         synchronized (mServiceAquireLock) {
             if (mStatusBarService == null) {
@@ -1408,6 +1524,20 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             if (expandedDesktopStyle != mExpandedDesktopStyle) {
                 mExpandedDesktopStyle = expandedDesktopStyle;
                 updateDisplayMetrics = true;
+                if (mSystemReady) {
+                    updateShowStatusBarPieListenerState();
+                }
+            }
+
+            boolean showStatusBarOnTopOfFullscreen = Settings.System.getIntForUser(
+                    resolver, Settings.System.STATUS_BAR_ON_TOP_OF_FULLSCREEN,
+                    0, UserHandle.USER_CURRENT) != 0;
+
+            if (showStatusBarOnTopOfFullscreen != mShowStatusBarOnTopOfFullscreen) {
+                mShowStatusBarOnTopOfFullscreen = showStatusBarOnTopOfFullscreen;
+                if (mSystemReady) {
+                    updateShowStatusBarPieListenerState();
+                }
             }
 
             // Configure rotation lock.
@@ -1461,6 +1591,49 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         }
     }
 
+    private void enableStatusBarShowPieListener() {
+        mPieManager.updatePieActivationListener(mShowStatusBarListener,
+                PieServiceConstants.SENSITIVITY_DEFAULT << PieServiceConstants.SENSITIVITY_SHIFT
+                | PiePosition.TOP.FLAG);
+    }
+
+    private void disableStatusBarShowPieListener() {
+        mShowStatusBarListener.restoreListenerState();
+        mPieManager.updatePieActivationListener(mShowStatusBarListener, 0);
+    }
+
+    private void enableStatusBarHideReceiver() {
+        if (mStatusBarHideEventsReceiver == null) {
+            mStatusBarHideInputChannel = mWindowManagerFuncs
+                    .monitorInput("ShowStatusBarGesture");
+            mStatusBarHideEventsReceiver = new StatusBarHideEventsReceiver(
+                    mStatusBarHideInputChannel, Looper.myLooper());
+        }
+    }
+
+    private void disableStatusBarHideReceiver() {
+        if (mStatusBarHideEventsReceiver != null) {
+            mStatusBarHideEventsReceiver.dispose();
+            mStatusBarHideEventsReceiver = null;
+        }
+        if (mStatusBarHideInputChannel != null) {
+            mStatusBarHideInputChannel.dispose();
+            mStatusBarHideInputChannel = null;
+        }
+    }
+
+    private void updateShowStatusBarPieListenerState() {
+        boolean needReceiver = mTopIsFullscreen || expandedDesktopHidesStatusBar();
+
+        if (mShowStatusBarOnTopOfFullscreen && needReceiver) {
+            mHandler.removeMessages(MSG_DISABLE_STATUS_BAR_SHOW_LISTENER);
+            mHandler.sendEmptyMessage(MSG_ENABLE_STATUS_BAR_SHOW_LISTENER);
+        } else {
+            mHandler.removeMessages(MSG_ENABLE_STATUS_BAR_SHOW_LISTENER);
+            mHandler.sendEmptyMessage(MSG_DISABLE_STATUS_BAR_SHOW_LISTENER);
+        }
+    }
+
     private void enablePointerLocation() {
         if (mPointerLocationView == null) {
             mPointerLocationView = new PointerLocationView(mContext);
@@ -3196,7 +3369,7 @@ public class PhoneWindowManager implements WindowManagerPolicy {
 
                 // If the status bar is hidden, we don't want to cause
                 // windows behind it to scroll.
-                if (mStatusBar.isVisibleLw()) {
+                if (mStatusBar.isVisibleLw() && !expandedDesktopHidesStatusBar()) {
                     // Status bar may go away, so the screen area it occupies
                     // is available to apps but just covering them when the
                     // status bar is visible.
@@ -3659,11 +3832,11 @@ public class PhoneWindowManager implements WindowManagerPolicy {
     }
 
     private boolean expandedDesktopHidesStatusBar() {
-        return mExpandedDesktopStyle == 2;
+        return mExpandedDesktopStyle == Settings.System.EXPANDED_DESKTOP_STATUS_BAR_HIDDEN;
     }
 
     private boolean expandedDesktopHidesNavigationBar() {
-        return mExpandedDesktopStyle != 0;
+        return mExpandedDesktopStyle != Settings.System.EXPANDED_DESKTOP_DISABLED;
     }
 
     private boolean shouldHideNavigationBarLw(int systemUiVisibility) {
@@ -3805,7 +3978,13 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             if (DEBUG_LAYOUT) Log.i(TAG, "force=" + mForceStatusBar
                     + " forcefkg=" + mForceStatusBarFromKeyguard
                     + " top=" + mTopFullscreenOpaqueWindowState);
-            if (mForceStatusBar || mForceStatusBarFromKeyguard
+
+            if (mStatusBarHideAfterCollapsed && !isStatusbarExpanded()) {
+                mStatusBarHideAfterCollapsed = false;
+                setStatusBarShownTemporarily(false);
+            }
+
+            if ((mForceStatusBar || mForceStatusBarFromKeyguard)
                     && !expandedDesktopHidesStatusBar()) {
                 if (DEBUG_LAYOUT) Log.v(TAG, "Showing status bar: forced");
                 if (mStatusBar.showLw(true)) changes |= FINISH_LAYOUT_REDO_LAYOUT;
@@ -3822,7 +4001,8 @@ public class PhoneWindowManager implements WindowManagerPolicy {
                 // and mTopIsFullscreen is that that mTopIsFullscreen is set only if the window
                 // has the FLAG_FULLSCREEN set.  Not sure if there is another way that to be the
                 // case though.
-                if (topIsFullscreen || expandedDesktopHidesStatusBar()) {
+                if ((topIsFullscreen || expandedDesktopHidesStatusBar())
+                        && !isStatusBarShownTemporarily()) {
                     if (DEBUG_LAYOUT) Log.v(TAG, "** HIDING status bar");
                     if (mStatusBar.hideLw(true)) {
                         changes |= FINISH_LAYOUT_REDO_LAYOUT;
@@ -3850,7 +4030,10 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             }
         }
 
-        mTopIsFullscreen = topIsFullscreen;
+        if (topIsFullscreen != mTopIsFullscreen) {
+            mTopIsFullscreen = topIsFullscreen;
+            updateShowStatusBarPieListenerState();
+        }
 
         // Hide the key guard if a visible window explicitly specifies that it wants to be
         // displayed when the screen is locked.
@@ -3917,6 +4100,22 @@ public class PhoneWindowManager implements WindowManagerPolicy {
         return changes;
     }
 
+    private boolean isStatusBarShownTemporarily() {
+        return mStatusBarShownTemporarily;
+    }
+
+    private void setStatusBarShownTemporarily(boolean shown) {
+        mStatusBarShownTemporarily = shown;
+        if (shown) {
+            mHandler.removeMessages(MSG_DISABLE_STATUS_BAR_HIDE_RECEIVER);
+            mHandler.sendEmptyMessage(MSG_ENABLE_STATUS_BAR_HIDE_RECEIVER);
+        } else {
+            mHandler.removeMessages(MSG_ENABLE_STATUS_BAR_HIDE_RECEIVER);
+            mHandler.sendEmptyMessage(MSG_DISABLE_STATUS_BAR_HIDE_RECEIVER);
+            mShowStatusBarListener.restoreListenerState();
+        }
+    }
+
     public boolean allowAppAnimationsLw() {
         if (mKeyguard != null && mKeyguard.isVisibleLw() && !mKeyguard.isAnimatingLw()) {
             // If keyguard is currently visible, no reason to animate
@@ -5071,6 +5270,9 @@ public class PhoneWindowManager implements WindowManagerPolicy {
             mKeyguardMediator.onSystemReady();
         }
         synchronized (mLock) {
+            mPieManager = PieManager.getInstance();
+            mPieManager.setPieActivationListener(mShowStatusBarListener);
+            updateShowStatusBarPieListenerState();
             updateOrientationListenerLp();
             mSystemReady = true;
             mHandler.post(new Runnable() {
-- 
1.8.4

