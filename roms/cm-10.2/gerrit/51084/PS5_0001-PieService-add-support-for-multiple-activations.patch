From 58c6c8208b28aebf87919e700ede91596f14035a Mon Sep 17 00:00:00 2001
From: Kyrylo Mikos <kiril.mik.os@gmail.com>
Date: Sat, 28 Sep 2013 15:24:24 +0300
Subject: [PATCH] PieService: add support for multiple activations.

Change-Id: Iec71a85e05cdde7392a297b93ca64d0c820df599
---
 .../java/android/service/pie/IPieHostCallback.aidl |  5 ++
 core/java/android/service/pie/PieManager.java      | 10 +++
 services/java/com/android/server/SystemServer.java |  2 +-
 .../com/android/server/pie/PieInputFilter.java     | 21 +++++-
 .../java/com/android/server/pie/PieService.java    | 80 ++++++++++++----------
 5 files changed, 79 insertions(+), 39 deletions(-)

diff --git a/core/java/android/service/pie/IPieHostCallback.aidl b/core/java/android/service/pie/IPieHostCallback.aidl
index 1853294..be0d692 100644
--- a/core/java/android/service/pie/IPieHostCallback.aidl
+++ b/core/java/android/service/pie/IPieHostCallback.aidl
@@ -12,4 +12,9 @@ interface IPieHostCallback {
      * the call to the listener.
      */
     oneway void restoreListenerState();
+
+    /*
+     * Tells pie filter to drop all events till touch up
+     */
+    boolean dropEventsUntilLift();
 }
\ No newline at end of file
diff --git a/core/java/android/service/pie/PieManager.java b/core/java/android/service/pie/PieManager.java
index 1ba9d37..e0d24cc 100644
--- a/core/java/android/service/pie/PieManager.java
+++ b/core/java/android/service/pie/PieManager.java
@@ -97,6 +97,16 @@ public class PieManager {
             return false;
         }
 
+        public boolean dropEventsUntilLift() {
+            try {
+                return mCallback.dropEventsUntilLift();
+            } catch (RemoteException e) {
+                Slog.w(TAG, "dropNextEvents failed: " + e.getMessage());
+                /* fall through */
+            }
+            return false;
+        }
+
         /**
          * Turns listening for pie activation gestures on again, after it was disabled during
          * the call to the listener.
diff --git a/services/java/com/android/server/SystemServer.java b/services/java/com/android/server/SystemServer.java
index 72e8f12..128e941 100644
--- a/services/java/com/android/server/SystemServer.java
+++ b/services/java/com/android/server/SystemServer.java
@@ -830,7 +830,7 @@ class ServerThread extends Thread {
                     com.android.internal.R.bool.config_allowPieService)) {
                 try {
                     Slog.i(TAG, "Pie Delivery Service");
-                    pieService = new PieService(context, wm, inputManager);
+                    pieService = new PieService(context, inputManager);
                     ServiceManager.addService("pieservice", pieService);
                 } catch (Throwable e) {
                     Slog.e(TAG, "Failure starting Pie Delivery Service Service", e);
diff --git a/services/java/com/android/server/pie/PieInputFilter.java b/services/java/com/android/server/pie/PieInputFilter.java
index 999cf72..894afe4 100644
--- a/services/java/com/android/server/pie/PieInputFilter.java
+++ b/services/java/com/android/server/pie/PieInputFilter.java
@@ -67,6 +67,9 @@ import java.io.PrintWriter;
  *    mSyntheticDownTime != -1
  *    All following events will have the down time set to the synthesized ACTION_DOWN event time
  *    until an ACTION_UP or ACTION_CANCEL is encountered and the state is reset to LISTEN.
+ * 6) DROP:
+ *    All following events will be discarded. If there is an ACTION_UP, _CANCEL
+ *    we go to LISTEN state.
  * <p>
  * If you are reading this within Java Doc, you are doing something wrong ;)
  */
@@ -153,7 +156,7 @@ public class PieInputFilter implements IInputFilter {
 
     private int mDeviceId; // dispatcher only
     private enum State {
-        LISTEN, DETECTING, LOCKED, SYNTHESIZE, POSTSYNTHESIZE;
+        LISTEN, DETECTING, LOCKED, SYNTHESIZE, POSTSYNTHESIZE, DROP;
     }
     private State mState = State.LISTEN; // guarded by mLock
     private PieGestureTracker mTracker; // guarded by mLock
@@ -212,6 +215,16 @@ public class PieInputFilter implements IInputFilter {
         return false;
     }
 
+    public boolean dropSequence() {
+        synchronized (mLock) {
+            if (mState == State.LOCKED) {
+                mState = State.DROP;
+                return true;
+            }
+        }
+        return false;
+    }
+
     /**
      * Called to enqueue the input event for filtering.
      * The event must be recycled after the input filter processed it.
@@ -326,6 +339,12 @@ public class PieInputFilter implements IInputFilter {
                     }
                     sendInputEvent(motionEvent, policyFlags);
                     break;
+                case DROP:
+                    if (action == MotionEvent.ACTION_UP || action == MotionEvent.ACTION_CANCEL) {
+                        clearDelayedMotionEventsLocked();
+                        mState = State.LISTEN;
+                    }
+                    break;
             }
         }
     }
diff --git a/services/java/com/android/server/pie/PieService.java b/services/java/com/android/server/pie/PieService.java
index 5760580..8d7765a 100644
--- a/services/java/com/android/server/pie/PieService.java
+++ b/services/java/com/android/server/pie/PieService.java
@@ -125,6 +125,16 @@ public class PieService extends IPieService.Stub {
             return false;
         }
 
+        public boolean dropEventsUntilLift() {
+            if (DEBUG) {
+                Slog.d(TAG, "Will drop all next events till touch up");
+            }
+            if (mActive) {
+                return mInputFilter.dropSequence();
+            }
+            return false;
+        }
+
         // called through Binder
         public void restoreListenerState() throws RemoteException {
             if (DEBUG) {
@@ -134,14 +144,16 @@ public class PieService extends IPieService.Stub {
                 mInputFilter.unlockFilter();
                 mActive = false;
                 synchronized (mLock) {
-                    mActiveRecord = null;
                     // restore input filter state by updating
-                    mHandler.obtainMessage(MSG_UPDATE_SERVICE,
-                            mGlobalPositions, mGlobalSensitivity).sendToTarget();
+                    mHandler.sendEmptyMessage(MSG_UPDATE_SERVICE);
                 }
             }
         }
 
+        public boolean isActive() {
+            return mActive;
+        }
+
         public void dump(PrintWriter pw, String prefix) {
             pw.print(prefix);
             pw.print("mPositions=0x" + Integer.toHexString(positions));
@@ -156,13 +168,12 @@ public class PieService extends IPieService.Stub {
     }
     private final List<PieActivationListenerRecord> mPieActivationListener =
             new ArrayList<PieActivationListenerRecord>();
-    private PieActivationListenerRecord mActiveRecord = null;
     // end of lock guarded variables
 
     private DisplayObserver mDisplayObserver;
 
     // called by system server
-    public PieService(Context context, WindowManagerService windowManager, InputManagerService inputManager) {
+    public PieService(Context context, InputManagerService inputManager) {
         mContext = context;
         mInputManager = inputManager;
     }
@@ -183,9 +194,7 @@ public class PieService extends IPieService.Stub {
         });
         mDisplayObserver = new DisplayObserver(mContext, mHandler);
         // check if anyone registered during startup
-        updateMonitoring();
-        mHandler.obtainMessage(MSG_UPDATE_SERVICE,
-                mGlobalPositions, mGlobalSensitivity).sendToTarget();
+        mHandler.sendEmptyMessage(MSG_UPDATE_SERVICE);
     }
 
 
@@ -193,20 +202,26 @@ public class PieService extends IPieService.Stub {
         synchronized(mLock) {
             mGlobalPositions = 0;
             mGlobalSensitivity = SENSITIVITY_NONE;
+            int activePositions = 0;
             for (PieActivationListenerRecord temp : mPieActivationListener) {
                 mGlobalPositions |= temp.positions;
+                if (temp.isActive()) {
+                    activePositions |= temp.positions;
+                }
                 if (temp.sensitivity != SENSITIVITY_NONE) {
                     mGlobalSensitivity = Math.max(mGlobalSensitivity, temp.sensitivity);
                 }
             }
+            boolean havePositions = mGlobalPositions != 0;
+            mGlobalPositions &= ~activePositions;
             // if no special sensitivity is requested, we settle on DEFAULT
             if (mGlobalSensitivity == SENSITIVITY_NONE) {
                 mGlobalSensitivity = SENSITIVITY_DEFAULT;
             }
 
-            if (mInputFilter == null && mGlobalPositions != 0) {
+            if (mInputFilter == null && havePositions) {
                 enforceMonitoringLocked();
-            } else if (mInputFilter != null && mGlobalPositions == 0) {
+            } else if (mInputFilter != null && !havePositions) {
                 shutdownMonitoringLocked();
             }
         }
@@ -272,11 +287,9 @@ public class PieService extends IPieService.Stub {
                 throw new IllegalStateException("listener not registered");
             }
             record.updateFlags(positionFlags);
-            updateMonitoring();
-            // update input filter only when not being active and #systemReady() was called
-            if (mActiveRecord == null && mHandler != null) {
-                mHandler.obtainMessage(MSG_UPDATE_SERVICE,
-                        mGlobalPositions, mGlobalSensitivity).sendToTarget();
+            // update input filter only when #systemReady() was called
+            if (mHandler != null) {
+                mHandler.sendEmptyMessage(MSG_UPDATE_SERVICE);
             }
         }
     }
@@ -293,22 +306,13 @@ public class PieService extends IPieService.Stub {
     private void removeListenerRecord(PieActivationListenerRecord record) {
         synchronized(mLock) {
             mPieActivationListener.remove(record);
-            updateMonitoring();
-            // check if the record was the active one
-            if (record == mActiveRecord) {
-                // restore input filter state by updating
-                mHandler.obtainMessage(MSG_UPDATE_SERVICE,
-                        mGlobalPositions, mGlobalSensitivity).sendToTarget();
-                mActiveRecord = null;
-            }
+            // restore input filter state by updating
+            mHandler.sendEmptyMessage(MSG_UPDATE_SERVICE);
         }
     }
 
     // called by handler thread
     private boolean propagateActivation(int touchX, int touchY, PiePosition position) {
-        if (mActiveRecord != null) {
-            Slog.w(TAG, "Handing activition while another activition is still in progress");
-        }
         synchronized(mLock) {
             PieActivationListenerRecord target = null;
             for (PieActivationListenerRecord record : mPieActivationListener) {
@@ -321,10 +325,10 @@ public class PieService extends IPieService.Stub {
             // Binder call. This means we do not block with holding the mListenerLock!!!
             // If this ever change, this needs to be adjusted and if you don't know what
             // this means, you should probably not mess around with this code, anyway.
-            if (target != null && target.notifyPieActivation(touchX, touchY, position)) {
-                mActiveRecord = target;
+            if (target != null && !target.notifyPieActivation(touchX, touchY, position)) {
+                target = null;
             }
-            return mActiveRecord != null;
+            return target != null;
         }
     }
 
@@ -344,16 +348,18 @@ public class PieService extends IPieService.Stub {
                     // theoretically. Take the safe route here.
                     removeMessages(MSG_PIE_ACTIVATION);
                     if (propagateActivation(m.arg1, m.arg2, (PiePosition) m.obj)) {
-                        // switch off all positions for the time of activation
-                        updateServiceHandler(0, 0);
+                        // switch off activated positions
+                        updateMonitoring();
+                        updateServiceHandler(mGlobalPositions, mGlobalSensitivity);
                     }
                     break;
                 case MSG_UPDATE_SERVICE:
+                    updateMonitoring();
                     if (DEBUG) {
-                        Slog.d(TAG, "Updating positions 0x" + Integer.toHexString(m.arg1)
-                                + " sensitivity: " + m.arg2);
+                        Slog.d(TAG, "Updating positions 0x" + Integer.toHexString(mGlobalPositions)
+                                + " sensitivity: " + mGlobalSensitivity);
                     }
-                    updateServiceHandler(m.arg1, m.arg2);
+                    updateServiceHandler(mGlobalPositions, mGlobalSensitivity);
                     break;
                 }
         }
@@ -460,10 +466,10 @@ public class PieService extends IPieService.Stub {
             pw.println("  mGlobalSensitivity=" + mGlobalSensitivity);
             int i = 0;
             for (PieActivationListenerRecord record : mPieActivationListener) {
-                if (record == mActiveRecord) break;
-                i++;
+                if (record.isActive()) {
+                    pw.println("  Active record: #" + (i + 1));
+                }
             }
-            pw.println("  mActiveRecord=" + (mActiveRecord != null ? ("#" + i) : "null"));
             i = 0;
             for (PieActivationListenerRecord record : mPieActivationListener) {
                 pw.println("  Listener #" + i + ":");
-- 
1.8.4

